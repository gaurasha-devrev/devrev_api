{
	"info": {
		"_postman_id": "c1d2e3f4-5678-9abc-def0-123456789012",
		"name": "DevRev - Tags API",
		"description": "Collection for DevRev Tags API operations - labeling and categorization system",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Create Tag",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 201) {",
							"    const response = pm.response.json();",
							"    if (response.tag) {",
							"        pm.environment.set('tag_id', response.tag.id);",
							"        pm.environment.set('tag_display_id', response.tag.display_id);",
							"        console.log('Tag created with ID:', response.tag.id);",
							"        console.log('Tag name:', response.tag.name);",
							"    }",
							"} else {",
							"    console.log('Tag creation failed:', pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{$randomWord}}-{{$randomInt}}\",\n  \"description\": \"Test tag created via API on {{$timestamp}} for categorization and labeling\",\n  \"color\": \"#3498db\"\n}"
				},
				"url": {
					"raw": "https://{{base_url}}/tags.create",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tags.create"
					]
				},
				"description": "Creates a new tag for labeling and categorization"
			}
		},
		{
			"name": "Get Tag by ID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{base_url}}/tags.get?id={{tag_id}}",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tags.get"
					],
					"query": [
						{
							"key": "id",
							"value": "{{tag_id}}",
							"description": "Tag ID from created tag"
						}
					]
				},
				"description": "Retrieves tag details using the tag ID"
			}
		},
		{
			"name": "List Tags",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    if (response.tags && response.tags.length > 0) {",
							"        // Set the first tag ID for future use",
							"        pm.environment.set('first_tag_id', response.tags[0].id);",
							"        console.log('Found', response.tags.length, 'tags');",
							"        console.log('Available tags:', response.tags.map(t => t.name).join(', '));",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{base_url}}/tags.list?limit=50",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tags.list"
					],
					"query": [
						{
							"key": "limit",
							"value": "50",
							"description": "Maximum number of tags to return"
						},
						{
							"key": "name",
							"value": "",
							"description": "Filter by tag name",
							"disabled": true
						}
					]
				},
				"description": "Lists all available tags with optional filtering"
			}
		},
		{
			"name": "Update Tag",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{tag_id}}\",\n  \"description\": \"[UPDATED on {{$timestamp}}] This tag has been updated via API\",\n  \"color\": \"#e74c3c\"\n}"
				},
				"url": {
					"raw": "https://{{base_url}}/tags.update",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tags.update"
					]
				},
				"description": "Updates an existing tag's properties"
			}
		},
		{
			"name": "Delete Tag",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{tag_id}}\"\n}"
				},
				"url": {
					"raw": "https://{{base_url}}/tags.delete",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tags.delete"
					]
				},
				"description": "Deletes a tag"
			}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script for the entire collection",
					"console.log('DevRev Tags API Collection - Request starting');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Post-response script for the entire collection",
					"console.log('Response status:', pm.response.code, pm.response.status);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "api.devrev.ai",
			"type": "string"
		}
	]
}
