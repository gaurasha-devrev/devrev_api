{
	"info": {
		"_postman_id": "h6i7j8k9-abcd-ef01-2345-678901234567",
		"name": "DevRev - Webhooks API",
		"description": "Collection for DevRev Webhooks API operations - event notifications and integrations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Create Webhook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 201) {",
							"    const response = pm.response.json();",
							"    if (response.webhook) {",
							"        pm.environment.set('webhook_id', response.webhook.id);",
							"        pm.environment.set('webhook_display_id', response.webhook.display_id);",
							"        console.log('Webhook created with ID:', response.webhook.id);",
							"        console.log('Webhook URL:', response.webhook.url);",
							"        console.log('Event types:', response.webhook.event_types.join(', '));",
							"    }",
							"} else {",
							"    console.log('Webhook creation failed:', pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"url\": \"https://{{$randomDomainName}}.com/webhooks/devrev\",\n  \"event_types\": [\n    \"work_created\",\n    \"work_updated\",\n    \"work_deleted\",\n    \"conversation_created\",\n    \"timeline_entry_created\"\n  ],\n  \"description\": \"Webhook for {{$randomDomainName}} integration - created {{$timestamp}}\",\n  \"secret\": \"{{$randomPassword}}\",\n  \"enabled\": true\n}"
				},
				"url": {
					"raw": "https://{{base_url}}/webhooks.create",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"webhooks.create"
					]
				},
				"description": "Creates a new webhook endpoint for event notifications"
			}
		},
		{
			"name": "Create Work-focused Webhook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 201) {",
							"    const response = pm.response.json();",
							"    if (response.webhook) {",
							"        pm.environment.set('work_webhook_id', response.webhook.id);",
							"        console.log('Work-focused webhook created:', response.webhook.id);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"url\": \"https://work-tracker.{{$randomDomainName}}.com/hooks/work-updates\",\n  \"event_types\": [\n    \"work_created\",\n    \"work_updated\",\n    \"work_stage_updated\",\n    \"work_priority_updated\"\n  ],\n  \"description\": \"Work item tracking webhook for project management integration\",\n  \"filters\": {\n    \"work_types\": [\"issue\", \"ticket\"],\n    \"priorities\": [\"p0\", \"p1\"]\n  },\n  \"enabled\": true\n}"
				},
				"url": {
					"raw": "https://{{base_url}}/webhooks.create",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"webhooks.create"
					]
				},
				"description": "Creates a webhook specifically for work item events with filtering"
			}
		},
		{
			"name": "Get Webhook by ID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{base_url}}/webhooks.get?id={{webhook_id}}",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"webhooks.get"
					],
					"query": [
						{
							"key": "id",
							"value": "{{webhook_id}}",
							"description": "Webhook ID from created webhook"
						}
					]
				},
				"description": "Retrieves webhook details and configuration"
			}
		},
		{
			"name": "List Webhooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    if (response.webhooks && response.webhooks.length > 0) {",
							"        console.log('Found', response.webhooks.length, 'webhooks');",
							"        const enabledCount = response.webhooks.filter(w => w.enabled).length;",
							"        console.log('Enabled webhooks:', enabledCount);",
							"        pm.environment.set('first_webhook_id', response.webhooks[0].id);",
							"        ",
							"        // Log all webhook URLs for reference",
							"        response.webhooks.forEach((webhook, index) => {",
							"            console.log(`Webhook ${index + 1}: ${webhook.url} (${webhook.enabled ? 'enabled' : 'disabled'})`);",
							"        });",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{base_url}}/webhooks.list?limit=20",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"webhooks.list"
					],
					"query": [
						{
							"key": "limit",
							"value": "20",
							"description": "Maximum number of webhooks to return"
						},
						{
							"key": "enabled",
							"value": "",
							"description": "Filter by enabled status (true/false)",
							"disabled": true
						}
					]
				},
				"description": "Lists all webhooks with their configurations"
			}
		},
		{
			"name": "Update Webhook",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{webhook_id}}\",\n  \"description\": \"[UPDATED {{$timestamp}}] Enhanced webhook with additional event types\",\n  \"event_types\": [\n    \"work_created\",\n    \"work_updated\",\n    \"work_deleted\",\n    \"conversation_created\",\n    \"timeline_entry_created\",\n    \"account_created\",\n    \"user_created\"\n  ],\n  \"enabled\": true\n}"
				},
				"url": {
					"raw": "https://{{base_url}}/webhooks.update",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"webhooks.update"
					]
				},
				"description": "Updates webhook configuration and event types"
			}
		},
		{
			"name": "Test Webhook",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{webhook_id}}\"\n}"
				},
				"url": {
					"raw": "https://{{base_url}}/webhooks.test",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"webhooks.test"
					]
				},
				"description": "Sends a test event to the webhook endpoint"
			}
		},
		{
			"name": "Disable Webhook",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{webhook_id}}\",\n  \"enabled\": false\n}"
				},
				"url": {
					"raw": "https://{{base_url}}/webhooks.update",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"webhooks.update"
					]
				},
				"description": "Disables a webhook without deleting it"
			}
		},
		{
			"name": "Delete Webhook",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{aat}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{webhook_id}}\"\n}"
				},
				"url": {
					"raw": "https://{{base_url}}/webhooks.delete",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"webhooks.delete"
					]
				},
				"description": "Deletes a webhook permanently"
			}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script for the entire collection",
					"console.log('DevRev Webhooks API Collection - Request starting');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Post-response script for the entire collection",
					"console.log('Response status:', pm.response.code, pm.response.status);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "api.devrev.ai",
			"type": "string"
		}
	]
}
